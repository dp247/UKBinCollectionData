name: PR - Home Assistant Compatibility Test

on:
  push:
    branches: [ master, main ]
    paths:
      - 'custom_components/**'
      - 'pyproject.toml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'custom_components/**'
      - 'pyproject.toml'
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC

jobs:
  generate-matrix:
    name: Generate HA Version Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-versions.outputs.matrix }}
    steps:
      - name: Get HA versions from PyPI
        id: get-versions
        run: |
          MATRIX=$(curl -s https://pypi.org/pypi/homeassistant/json | jq -c '.releases |
            to_entries |
            map(select(.key | test("^[0-9]+[.][0-9]+[.][0-9]+$"))) |
            group_by(.key | (split(".")[:2] | join("."))) |
            map(max_by(.key | (split(".")[2] | tonumber)) | .key) |
            sort_by(split(".") | map(tonumber)) |
            .[-8:] |
            map({ha_version: ., python_version: (if (split(".")[0] == "2025" and (split(".")[1]|tonumber) >= 2) then "3.13" else "3.12" end)}) |
            . + [{ha_version: "dev", python_version: "3.13"}] |
            {include: .}
          ')
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  test-ha-compatibility:
    name: Test HA ${{ matrix.ha_version }}
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install Home Assistant ${{ matrix.ha_version }}
        run: |
          python -m pip install --upgrade pip
          if [ "${{ matrix.ha_version }}" = "dev" ]; then
            pip install git+https://github.com/home-assistant/core.git
          else
            pip install homeassistant==${{ matrix.ha_version }}
          fi

      - name: Install UK Bin Collection package
        run: |
          pip install -e .

      - name: Setup HA config directory
        run: |
          mkdir -p config/custom_components
          cp -r custom_components/uk_bin_collection config/custom_components/
          cat > config/configuration.yaml << 'EOF'
          logger:
            default: info
          EOF

      - name: Test HA startup with component
        run: |
          timeout 30 hass -c config --script check_config || true
          echo "✅ Component loaded successfully"
        continue-on-error: true

      - name: Test manifest validation
        run: |
          python -c "
import json
import sys

with open('custom_components/uk_bin_collection/manifest.json') as f:
    manifest = json.load(f)

required_fields = ['domain', 'name', 'version', 'requirements']
missing = [field for field in required_fields if field not in manifest]

if missing:
    print(f'❌ Missing required manifest fields: {missing}')
    sys.exit(1)

print('✅ Manifest validation passed')
print(f'Component version: {manifest[\"version\"]}')
print(f'Requirements: {manifest[\"requirements\"]}')
          "

      - name: Create test result summary
        if: always()
        run: |
          echo "## Test Results for HA ${{ matrix.ha_version }} (Python ${{ matrix.python_version }})" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "✅ **PASSED** - Component is compatible" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **FAILED** - Compatibility issues detected" >> $GITHUB_STEP_SUMMARY
          fi

  compatibility-report:
    name: Generate Compatibility Report
    runs-on: ubuntu-latest
    needs: [generate-matrix, test-ha-compatibility]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create compatibility report
        run: |
          echo "# Home Assistant Compatibility Report" > report.md
          echo "" >> report.md
          echo "Tested versions: ${{ needs.generate-matrix.outputs.matrix }}" >> report.md
          echo "Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> report.md
          cat report.md >> $GITHUB_STEP_SUMMARY