name: Home Assistant Compatibility Test

on:
  push:
    branches: [ master, main ]
    paths:
      - 'custom_components/**'
      - 'pyproject.toml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'custom_components/**'
      - 'pyproject.toml'
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC

jobs:
  generate-matrix:
    name: Generate HA Version Matrix
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.get-versions.outputs.versions }}
    steps:
      - name: Get HA versions from PyPI
        id: get-versions
        run: |
          VERSIONS=$(curl -s https://pypi.org/pypi/homeassistant/json | jq -c '[.releases | keys[] | select(test("^202[3-9][.](1[0-2]|[1-9])[.]0$"))] | sort | .[-8:] + ["dev"]')
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT

  test-ha-compatibility:
    name: Test HA ${{ matrix.ha-version }}
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix:
        ha-version: ${{ fromJson(needs.generate-matrix.outputs.versions) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-homeassistant-custom-component

      - name: Install Home Assistant ${{ matrix.ha-version }}
        run: |
          if [ "${{ matrix.ha-version }}" = "dev" ]; then
            pip install git+https://github.com/home-assistant/core.git
          else
            pip install homeassistant==${{ matrix.ha-version }}
          fi

      - name: Install UK Bin Collection package
        run: |
          pip install -e .

      - name: Run component validation
        run: |
          python -m pytest custom_components/uk_bin_collection/tests/ -v
        continue-on-error: ${{ matrix.ha-version == 'dev' }}

      - name: Test component import
        run: |
          python -c "
          import sys
          sys.path.insert(0, 'custom_components')
          try:
              from uk_bin_collection import __init__ as component
              print('✅ Component imports successfully')
          except Exception as e:
              print(f'❌ Component import failed: {e}')
              sys.exit(1)
          "

      - name: Test manifest validation
        run: |
          python -c "
          import json
          import sys
          
          with open('custom_components/uk_bin_collection/manifest.json') as f:
              manifest = json.load(f)
          
          required_fields = ['domain', 'name', 'version', 'requirements']
          missing = [field for field in required_fields if field not in manifest]
          
          if missing:
              print(f'❌ Missing required manifest fields: {missing}')
              sys.exit(1)
          
          print('✅ Manifest validation passed')
          print(f'Component version: {manifest[\"version\"]}')
          print(f'Requirements: {manifest[\"requirements\"]}')
          "

      - name: Create test result summary
        if: always()
        run: |
          echo "## Test Results for HA ${{ matrix.ha-version }}" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "✅ **PASSED** - Component is compatible" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **FAILED** - Compatibility issues detected" >> $GITHUB_STEP_SUMMARY
          fi

  compatibility-report:
    name: Generate Compatibility Report
    runs-on: ubuntu-latest
    needs: [generate-matrix, test-ha-compatibility]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create compatibility report
        run: |
          echo "# Home Assistant Compatibility Report" > report.md
          echo "" >> report.md
          echo "Tested versions: ${{ needs.generate-matrix.outputs.versions }}" >> report.md
          echo "Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> report.md
          cat report.md >> $GITHUB_STEP_SUMMARY