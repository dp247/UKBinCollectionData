name: PR - Home Assistant Compatibility Test

on:
  push:
    branches: [ master, main ]
    paths:
      - 'custom_components/**'
      - 'pyproject.toml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'custom_components/**'
      - 'pyproject.toml'
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC

jobs:
  generate-matrix:
    name: Generate HA Version Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-versions.outputs.matrix }}
    steps:
      - name: Get HA versions from PyPI
        id: get-versions
        run: |
          MATRIX=$(curl -s https://pypi.org/pypi/homeassistant/json | jq -c '
            .releases
            | to_entries
            # keep only x.y.z (skip betas/devs/post)
            | map(select(.key | test("^[0-9]+\\.[0-9]+\\.[0-9]+$")))
            # group by major.minor, keep highest patch
            | group_by(.key | (split(".")[:2] | join(".")))
            | map(max_by(.key | (split(".")[2] | tonumber)) | .key)
            # sort numerically and take latest 8
            | sort_by(split(".") | map(tonumber))
            | .[-8:]
            # pick python version per HA series; adjust as needed
            | map({ha_version: ., python_version: (if (split(".")[0] == "2025" and (split(".")[1]|tonumber) >= 2) then "3.13" else "3.12" end)})
            # also test latest dev on py 3.13
            | . + [{ha_version: "dev", python_version: "3.13"}]
            | {include: .}
          ')
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

  test-ha-compatibility:
    name: Test HA ${{ matrix.ha_version }}
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
          cache: 'pip'

      - name: Install Home Assistant ${{ matrix.ha_version }}
        run: |
          python -m pip install --upgrade pip
          if [ "${{ matrix.ha_version }}" = "dev" ]; then
            pip install git+https://github.com/home-assistant/core.git
          else
            pip install homeassistant==${{ matrix.ha_version }}
          fi

      - name: Setup HA config directory
        run: |
          mkdir -p config/custom_components
          cp -r custom_components/uk_bin_collection config/custom_components/
          {
            echo "logger:"
            echo "  default: info"
            echo ""

          } > config/configuration.yaml
      
      - name: Preinstall runtime deps used by HA scripts
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install "colorlog==6.10.1"

      - name: Ensure base config & include custom component
        run: |
          # Create a clean config dir with defaults
          python -m homeassistant --script ensure_config -c config
          # Minimal config; if your integration supports YAML, keep it enabled here
          cat > config/configuration.yaml <<'YAML'
          logger:
            default: info
          # If your integration has YAML setup, keep this to make sure it's imported.
          uk_bin_collection: {}
          YAML

      - name: Boot Home Assistant headless and check logs
        id: boot
        shell: bash
        env:
          HASS_NO_COLOR: "1"
          NO_COLOR: "1"
        run: |
          set -euo pipefail
          rm -f config/home-assistant.log || true

          # Start HA with an explicit log file
          hass -c config --log-file config/home-assistant.log &
          HASS_PID=$!
          echo "pid=$HASS_PID"

          # Wait up to 150s for boot to finish, or bail out early on obvious errors
          TIMEOUT=150
          SECS=0
          INIT_MARKER="Home Assistant initialized"
          FAIL=0

          while (( SECS < TIMEOUT )); do
            if grep -q "$INIT_MARKER" config/home-assistant.log; then
              echo "✅ HA reports: $INIT_MARKER"
              break
            fi
            # bail early if we see a fatal traceback or ERROR from our domain
            if grep -Eiq 'Traceback|CRITICAL|Fatal error|ERROR.*(uk_bin_collection|custom_components\.uk_bin_collection)' config/home-assistant.log; then
              echo "❌ Error detected in log during startup"
              FAIL=1
              break
            fi
            sleep 1
            SECS=$((SECS+1))
          done

          # If timeout and no init marker, flag failure
          if (( SECS >= TIMEOUT )) && ! grep -q "$INIT_MARKER" config/home-assistant.log; then
            echo "❌ HA did not finish booting within ${TIMEOUT}s"
            FAIL=1
          fi

          # Always try to shut down cleanly
          kill -INT $HASS_PID || true
          wait $HASS_PID || true

          echo "--- Last 80 log lines ---"
          tail -n 80 config/home-assistant.log || true

          # Expose pass/fail to later steps
          echo "boot_failed=${FAIL}" >> "$GITHUB_OUTPUT"
          exit ${FAIL}

      - name: Upload HA log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ha-log-${{ matrix.ha_version }}-py${{ matrix.python_version }}
          path: config/home-assistant.log
          overwrite: true


      # OPTIONAL: enforce job failure when incompatible. Uncomment to make the matrix red on failures.
      # - name: Fail job if check_config failed
      #   if: ${{ steps.check_config.outputs.exit_code != '0' }}
      #   run: exit 1

      - name: Test manifest validation
        id: manifest
        run: |
          python <<'PY'
          import json, sys
          with open('custom_components/uk_bin_collection/manifest.json') as f:
              m = json.load(f)
          required = ['domain', 'name', 'version', 'requirements']
          missing = [k for k in required if k not in m]
          if missing:
              print(f'❌ Missing required manifest fields: {missing}')
              sys.exit(1)
          print('✅ Manifest validation passed')
          print(f'Component version: {m.get("version")}')
          print(f'Requirements: {m.get("requirements")}')
          PY

      - name: Create test result summary
        if: always()
        run: |
          echo "## Boot Results for HA ${{ matrix.ha_version }} (Python ${{ matrix.python_version }})" >> "$GITHUB_STEP_SUMMARY"
          if [ "${{ steps.boot.outputs.boot_failed }}" = "0" ] && [ "${{ steps.manifest.outcome }}" = "success" ]; then
            echo "✅ **PASSED** – HA booted with the custom component present" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ **FAILED** – HA failed to boot cleanly" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "- boot step failed: \`${{ steps.boot.outputs.boot_failed }}\`" >> "$GITHUB_STEP_SUMMARY"
            echo "- manifest step: \`${{ steps.manifest.outcome }}\`" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "See the uploaded **ha-log** artifact for details." >> "$GITHUB_STEP_SUMMARY"
          fi


  compatibility-report:
    name: Generate Compatibility Report
    runs-on: ubuntu-latest
    needs: [generate-matrix, test-ha-compatibility]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create compatibility report
        run: |
          echo "# Home Assistant Compatibility Report" > report.md
          echo "" >> report.md
          echo "Matrix tested: \`${{ needs.generate-matrix.outputs.matrix }}\`" >> report.md
          echo "Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> report.md
          cat report.md >> "$GITHUB_STEP_SUMMARY"
